// shadertype=hlsl

cbuffer cameraCBuffer
{
	matrix m_CamProjOriginal;
	matrix m_CamProjJittered;
	matrix m_CamRot;
	matrix m_CamTrans;
	matrix m_CamRot_prev;
	matrix m_CamTrans_prev;
};

cbuffer meshCBuffer
{
	matrix m;
	matrix m_prev;
	matrix m_normalMat;
};

struct VertexInputType
{
	float4 position : POSITION;
	float2 texcoord : TEXCOORD;
	float2 pada : PADA;
	float4 normal : NORMAL;
	float4 padb : PADB;
};

struct PixelInputType
{
	float4 frag_ClipSpacePos : SV_POSITION;
	float4 frag_ClipSpacePos_orig : POSITION_ORIG;
	float4 frag_ClipSpacePos_prev : POSITION_PREV;
	float3 frag_WorldSpacePos : POSITION;
	float2 frag_TexCoord : TEXCOORD;
	float3 frag_Normal : NORMAL;
};

PixelInputType opaquePassCookTorranceVertex(VertexInputType input)
{
	PixelInputType output;

	float4 frag_WorldSpacePos = mul(input.position, m);
	float4 frag_WorldSpacePos_prev = mul(input.position, m_prev);

	float4 frag_CameraSpacePos = mul(frag_WorldSpacePos, m_CamTrans);
	frag_CameraSpacePos = mul(frag_CameraSpacePos, m_CamRot);

	float4 frag_CameraSpacePos_prev = mul(frag_WorldSpacePos_prev, m_CamTrans_prev);
	frag_CameraSpacePos_prev = mul(frag_CameraSpacePos, m_CamRot_prev);

	output.frag_ClipSpacePos = mul(frag_CameraSpacePos, m_CamProjJittered);
	output.frag_ClipSpacePos_orig = mul(frag_CameraSpacePos, m_CamProjOriginal);
	output.frag_ClipSpacePos_prev = mul(frag_CameraSpacePos_prev, m_CamProjOriginal);
	output.frag_WorldSpacePos = frag_WorldSpacePos.xyz;
	output.frag_TexCoord = input.texcoord;
	output.frag_Normal = mul(input.normal, m_normalMat).xyz;

	return output;
}