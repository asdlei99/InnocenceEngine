// shadertype=glsl
#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(binding = 0) uniform sampler3D voxelAlbedo;
layout(binding = 1) uniform sampler3D voxelNormal;
layout(binding = 2, rgba8) writeonly uniform image3D voxelRadiance;

struct dirLight {
	vec4 direction;
	vec4 luminance;
};

const float PI = 3.14159265f;
const float EPSILON = 1e-30;
const float SQRT_3 = 1.73205080f;

uniform dirLight uni_dirLight;

uniform uint uni_volumeDimension;
uniform float uni_voxelSize;
uniform float uni_voxelScale;
uniform vec4 uni_worldMinPoint;

uniform uint uni_normalWeightedLambert = 1;

vec3 VoxelToWorld(ivec3 pos)
{
	vec3 result = vec3(pos);
	result *= uni_voxelSize;

	return result + uni_worldMinPoint.xyz;
}

vec3 BRDF(dirLight light, vec3 normal, vec3 albedo)
{
	float nDotL = 0.0f;

	if (uni_normalWeightedLambert == 1)
	{
		vec3 weight = normal * normal;
		// calculate directional normal attenuation
		float rDotL = dot(vec3(1.0, 0.0, 0.0), light.direction.xyz);
		float uDotL = dot(vec3(0.0, 1.0, 0.0), light.direction.xyz);
		float fDotL = dot(vec3(0.0, 0.0, 1.0), light.direction.xyz);

		rDotL = normal.x > 0.0 ? max(rDotL, 0.0) : max(-rDotL, 0.0);
		uDotL = normal.y > 0.0 ? max(uDotL, 0.0) : max(-uDotL, 0.0);
		fDotL = normal.z > 0.0 ? max(fDotL, 0.0) : max(-fDotL, 0.0);
		// voxel shading average from all front sides
		nDotL = rDotL * weight.x + uDotL * weight.y + fDotL * weight.z;
	}
	else
	{
		nDotL = max(dot(normal, light.direction.xyz), 0.0f);
	}

	return light.luminance.xyz * albedo * nDotL;
}

vec4 CalculateDirectional(dirLight light, vec3 normal, vec3 position, vec3 albedo)
{
	return vec4(BRDF(light, normal, albedo), 1.0f);
}

vec4 CalculateDirectLighting(vec3 position, vec3 normal, vec3 albedo)
{
	normal = normalize(normal);
	// world space grid voxel size
	float voxelWorldSize = 1.0 / (uni_voxelScale * uni_volumeDimension);
	// calculate directional lighting
	vec4 directLighting = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec4 current = vec4(0.0f);
	int count = 0;
	// move position forward to avoid shadowing errors
	position = position + normal * voxelWorldSize * 0.5f;

	// calculate lighting for directional lights
	current = CalculateDirectional(uni_dirLight, normal, position, albedo);
	directLighting.rgb += current.rgb;
	directLighting.a += current.a;
	count++;

	if (count > 0) { directLighting.a /= count; }

	return directLighting;
}

vec3 EncodeNormal(vec3 normal)
{
	return normal * 0.5f + vec3(0.5f);
}

vec3 DecodeNormal(vec3 normal)
{
	return normal * 2.0f - vec3(1.0f);
}

void main()
{
	if (gl_GlobalInvocationID.x >= uni_volumeDimension ||
		gl_GlobalInvocationID.y >= uni_volumeDimension ||
		gl_GlobalInvocationID.z >= uni_volumeDimension) return;

	ivec3 writePos = ivec3(gl_GlobalInvocationID);

	// voxel color
	vec4 albedo = texelFetch(voxelAlbedo, writePos, 0);

	if (albedo.a < EPSILON) { return; }
	albedo.a = 1.0f;

	// voxel normal in 0-1 range
	vec3 baseNormal = texelFetch(voxelNormal, writePos, 0).xyz;

	// normal is stored in 0-1 range, restore to -1-1
	vec3 normal = DecodeNormal(baseNormal);

	// black voxel has no irradiance diffuse
	if (any(greaterThan(albedo.rgb, vec3(0.0f))))
	{
		// obtain world-space position of the current voxel
		vec3 wsPosition = VoxelToWorld(writePos);

		// calculate direct lighting onto voxel
		albedo = CalculateDirectLighting(wsPosition, normal, albedo.rgb);
	}

	imageStore(voxelRadiance, writePos, albedo);
}