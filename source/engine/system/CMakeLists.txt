#add_subdirectory("GLFWWrapper")
add_subdirectory("ImGuiWrapper")

if (INNO_PLATFORM_WIN)
add_subdirectory("DXRenderingBackend")
add_subdirectory("WinWindow")
endif (INNO_PLATFORM_WIN)

if (VULKAN)
add_subdirectory("VKRenderingBackend")
endif (VULKAN)

if (OPENGL_FOUND)
add_subdirectory("GLRenderingBackend")
endif (OPENGL_FOUND)

aux_source_directory(. DIR_SRCS)

add_library(InnoSystem SHARED ${DIR_SRCS})

include (GenerateExportHeader)
GENERATE_EXPORT_HEADER (InnoSystem
    BASE_NAME INNO_SYSTEM
    EXPORT_MACRO_NAME INNO_SYSTEM_EXPORT
    EXPORT_FILE_NAME ${CMAKE_SOURCE_DIR}/engine/exports/InnoSystem_Export.h
    STATIC_DEFINE INNO_SYSTEM_BUILT_AS_STATIC
)

if (INNO_PLATFORM_WIN)
target_link_libraries(InnoSystem InnoDXRenderingBackend)
target_link_libraries(InnoSystem WinWindow)
endif (INNO_PLATFORM_WIN)

if (VULKAN)
target_link_libraries(InnoSystem InnoVKRenderingBackend)
endif (VULKAN)

if (OPENGL_FOUND)
target_link_libraries(InnoSystem InnoGLRenderingBackend)
endif (OPENGL_FOUND)

target_link_libraries(InnoSystem GLAD)
target_link_libraries(InnoSystem ImGui)

find_library(ASSIMP assimp)
target_link_libraries(InnoSystem "${ASSIMP}")
target_link_libraries(InnoSystem STB_Image)

if (INNO_PLATFORM_LINUX)
target_link_libraries(InnoSystem -lX11 -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor -ldl -lGL -lm -lpthread -lstdc++fs)
elseif (INNO_PLATFORM_MAC)
#find_library(IRRXML IrrXML)
find_library(COCOA Cocoa)
find_library(IOKIT IOKit)
find_library(COREVIDEO CoreVideo)
target_link_libraries(InnoSystem "${COCOA}" "${IOKIT}" "${COREVIDEO}" -lz -lc++fs)
else ()
endif (INNO_PLATFORM_LINUX)
