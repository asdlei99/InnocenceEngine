#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct DispatchParam
{
    uvec4 numThreadGroups;
    uvec4 numThreads;
};

struct Brick
{
    uint surfelRangeBegin;
    uint surfelRangeEnd;
};

layout(binding = 8, std140) uniform dispatchParamsCBuffer
{
    DispatchParam dispatchParams[8];
} _26;

layout(binding = 0, std430) buffer in_bricks
{
    Brick _data[];
} in_bricks_1;

layout(binding = 1, std430) buffer in_surfelIrradiance
{
    vec4 _data[];
} in_surfelIrradiance_1;

layout(binding = 2, std430) buffer out_brickIrradiance
{
    vec4 _data[];
} out_brickIrradiance_1;

void main()
{
    if (((gl_GlobalInvocationID.x < _26.dispatchParams[3].numThreads.x) && (gl_GlobalInvocationID.y < _26.dispatchParams[3].numThreads.y)) && (gl_GlobalInvocationID.z < _26.dispatchParams[3].numThreads.z))
    {
        uint _263 = (gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * _26.dispatchParams[3].numThreads.x)) + ((gl_GlobalInvocationID.z * _26.dispatchParams[3].numThreads.x) * _26.dispatchParams[3].numThreads.y);
        vec4 _342;
        if (in_bricks_1._data[_263].surfelRangeBegin != in_bricks_1._data[_263].surfelRangeEnd)
        {
            vec4 _341;
            _341 = vec4(0.0);
            for (uint _340 = in_bricks_1._data[_263].surfelRangeBegin; _340 <= in_bricks_1._data[_263].surfelRangeEnd; )
            {
                _341 += in_surfelIrradiance_1._data[_340];
                _340++;
                continue;
            }
            _342 = _341 / vec4(float(in_bricks_1._data[_263].surfelRangeEnd - in_bricks_1._data[_263].surfelRangeBegin));
        }
        else
        {
            _342 = in_surfelIrradiance_1._data[in_bricks_1._data[_263].surfelRangeBegin];
        }
        out_brickIrradiance_1._data[_263] = _342;
    }
}

