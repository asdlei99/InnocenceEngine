#version 450

layout(binding = 11, std140) uniform GISkyCBuffer
{
    layout(row_major) mat4 GISky_p_inv;
    layout(row_major) mat4 GISky_v_inv[6];
    layout(row_major) mat4 GISky_viewportSize;
} _410;

layout(binding = 3, std140) uniform sunCBuffer
{
    vec4 dirLight_dir;
    vec4 dirLight_luminance;
    layout(row_major) mat4 dirLight_r;
    vec4 padding[2];
} _447;

layout(location = 0) out vec4 _entryPointOutput_skyPassRT0;

vec3 _1179;
vec2 _1180;
float _1184;
int _1185;
float _1186;

void main()
{
    vec4 _674 = _410.GISky_p_inv * vec4(((gl_FragCoord.xy / vec2(_410.GISky_viewportSize[0].x, _410.GISky_viewportSize[1].x)) - vec2(0.5)) * 2.0, 0.0, 1.0);
    vec3 _685 = normalize((_410.GISky_v_inv[uint(gl_Layer)] * (_674 / vec4(_674.w))).xyz);
    vec3 _1178;
    if (_685.y > (-0.100000001490116119384765625))
    {
        vec3 _1129;
        vec3 _1130;
        _1130 = _685;
        _1129 = -_447.dirLight_dir.xyz;
        vec3 _1133;
        vec3 _1142;
        vec3 _1177;
        vec3 _732;
        for (;;)
        {
            _732 = normalize(_1130);
            _1142 = normalize(_1129);
            _1133 = _732;
            vec2 _1131;
            for (;;)
            {
                float _910 = dot(_732, _732);
                float _913 = dot(_732, vec3(0.0, 6371000.0, 0.0));
                float _914 = 2.0 * _913;
                float _929 = (_914 * _914) - (_910 * (-5136797663232.0));
                if (_929 < 0.0)
                {
                    _1131 = vec2(100000.0, -100000.0);
                    break;
                }
                _1131 = vec2(((_913 * (-2.0)) - sqrt(_929)) / (2.0 * _910), ((_913 * (-2.0)) + sqrt(_929)) / (2.0 * _910));
                break;
            }
            if (_1131.x > _1131.y)
            {
                _1177 = vec3(0.0);
                break;
            }
            vec2 _1136;
            vec3 _1138;
            vec3 _1140;
            _1140 = _1142;
            _1138 = _1133;
            _1136 = _1131;
            vec2 _1134;
            for (;;)
            {
                float _965 = dot(_1133, _1133);
                float _968 = dot(_1133, vec3(0.0, 6371000.0, 0.0));
                float _969 = 2.0 * _968;
                float _979 = _969 * _969;
                if (_979 < 0.0)
                {
                    _1134 = vec2(100000.0, -100000.0);
                    break;
                }
                _1134 = vec2(((_968 * (-2.0)) - sqrt(_979)) / (2.0 * _965), _1186);
                break;
            }
            float _757 = min(_1131.y, _1134.x) - _1136.x;
            float _758 = _757 * 0.0625;
            float _761 = dot(_1138, _1140);
            float _1021 = 1.17489993572235107421875 - (0.550000011920928955078125 * pow(0.75800001621246337890625, 3.0));
            vec3 _1144;
            vec3 _1145;
            vec3 _1146;
            vec3 _1150;
            _1150 = _1140;
            _1146 = _1138;
            _1145 = vec3(0.0);
            _1144 = vec3(0.0);
            float _792;
            float _799;
            vec3 _867;
            float _1155;
            float _1156;
            float _1159;
            float _1160;
            vec3 _1163;
            vec3 _1166;
            float _1169;
            int _1172;
            vec3 _1175;
            vec3 _1183;
            int _1143 = 0;
            float _1147 = 0.0;
            float _1148 = 0.0;
            float _1149 = 0.0;
            for (; _1143 < 16; _867 = exp(-(vec3(2.0999999833293259143829345703125e-05 * (_1155 + _1156)) + (vec3(5.8000000535685103386640548706055e-06, 1.3500000022759195417165756225586e-05, 3.3100001019192859530448913574219e-05) * (_1159 + _1160)))), _1150 = _1175, _1149 = _1155, _1148 = _1159, _1147 = _1169 + _758, _1146 = _1183, _1145 = _1166 + (_867 * _799), _1144 = _1163 + (_867 * _792), _1143 = _1172 + 1)
            {
                float _779 = _1147 + (_757 * 0.03125);
                vec3 _780 = _1146 * _779;
                vec3 _781 = vec3(0.0, 6371000.0, 0.0) + _780;
                float _783 = length(_781);
                _792 = exp((6371000.0 - _783) * 0.00012500000593718141317367553710938) * _758;
                _799 = exp((6371000.0 - _783) * 0.00076923076994717121124267578125) * _758;
                _1183 = _1146;
                _1175 = _1150;
                _1172 = _1143;
                _1169 = _1147;
                _1166 = _1145;
                _1163 = _1144;
                _1159 = _1148 + _792;
                _1155 = _1149 + _799;
                vec2 _1151;
                for (;;)
                {
                    float _1048 = dot(_1150, _1150);
                    float _1051 = dot(_1150, _781);
                    float _1052 = 2.0 * _1051;
                    float _1067 = (_1052 * _1052) - ((4.0 * _1048) * (dot(_781, _781) - 41873842372608.0));
                    if (_1067 < 0.0)
                    {
                        _1151 = vec2(100000.0, -100000.0);
                        break;
                    }
                    _1151 = vec2(_1186, ((_1051 * (-2.0)) + sqrt(_1067)) / (2.0 * _1048));
                    break;
                }
                float _811 = _1151.y * 0.125;
                _1160 = 0.0;
                _1156 = 0.0;
                int _1152 = 0;
                float _1176 = 0.0;
                for (; _1152 < 8; )
                {
                    float _824 = _1176 + (_1151.y * 0.0625);
                    float _828 = length(_781 + (_1175 * _824));
                    _1176 += _811;
                    _1160 += (exp((6371000.0 - _828) * 0.00012500000593718141317367553710938) * _811);
                    _1156 += (exp((6371000.0 - _828) * 0.00076923076994717121124267578125) * _811);
                    _1152++;
                    continue;
                }
            }
            _1177 = (((vec3(5.8000000535685103386640548706055e-06, 1.3500000022759195417165756225586e-05, 3.3100001019192859530448913574219e-05) * (0.0596831031143665313720703125 * (1.0 + pow(_761, 2.0)))) * _1144) + (_1145 * (((1.0 - pow(_1021, 2.0)) / ((12.56637096405029296875 * pow(1.0 + (_1021 * _761), 2.0)) + 9.9999997473787516355514526367188e-05)) * 2.0999999833293259143829345703125e-05))) * 22.0;
            break;
        }
        _1178 = _1177;
    }
    else
    {
        _1178 = vec3(0.0);
    }
    _entryPointOutput_skyPassRT0 = vec4(_1178, 1.0);
}

