#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct DispatchParam
{
    uvec4 numThreadGroups;
    uvec4 numThreads;
};

layout(binding = 8, std140) uniform dispatchParamsCBuffer
{
    DispatchParam dispatchParams[8];
} _26;

layout(binding = 11, std140) uniform GISkyCBuffer
{
    layout(row_major) mat4 GISky_p_inv;
    layout(row_major) mat4 GISky_v_inv[6];
    vec4 GISky_probeCount;
    vec4 GISky_probeInterval;
    vec4 GISky_workload;
    vec4 GISky_irradianceVolumeOffset;
} _65;

layout(binding = 0, rgba32f) uniform writeonly image3D out_irradianceVolume;
uniform sampler3D SPIRV_Cross_Combinedin_probeVolumeSampleTypePoint;

void main()
{
    if (((gl_GlobalInvocationID.x < _26.dispatchParams[5].numThreads.x) && (gl_GlobalInvocationID.y < _26.dispatchParams[5].numThreads.y)) && (gl_GlobalInvocationID.z < _26.dispatchParams[5].numThreads.z))
    {
        vec3 _301 = _65.GISky_probeInterval.xyz * (_65.GISky_probeCount.xyz - vec3(1.0));
        vec3 _308 = vec3(_65.GISky_probeCount.w, _65.GISky_probeInterval.w, _65.GISky_irradianceVolumeOffset.w);
        vec3 _321 = (clamp(vec3(gl_GlobalInvocationID) + _65.GISky_irradianceVolumeOffset.xyz, _308, _308 + _301) - _308) / _301;
        vec4 _264[6];
        for (uint _398 = 0u; _398 < 6u; )
        {
            vec3 _395 = _321;
            _395.z = (_321.z * 0.16666667163372039794921875) + (float(_398) * 0.16666667163372039794921875);
            _264[_398] = textureLod(SPIRV_Cross_Combinedin_probeVolumeSampleTypePoint, _395, 0.0);
            imageStore(out_irradianceVolume, ivec3(uvec3(vec3(gl_GlobalInvocationID) + vec3(0.0, 0.0, float(_398) * float(_26.dispatchParams[5].numThreads.z)))), _264[_398]);
            _398++;
            continue;
        }
    }
}

