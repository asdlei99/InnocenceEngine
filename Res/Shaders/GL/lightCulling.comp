// shadertype=glsl
#include "common/common.glsl"
#include "common/utility.glsl"

layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;

layout(std430, binding = 0) coherent buffer gridFrustumsSSBOBlock
{
	Frustum data[];
} gridFrustumsSSBO;

layout(std430, binding = 1) buffer lightListIndexCounterSSBOBlock
{
	uint data;
} lightListIndexCounterSSBO;

layout(std430, binding = 2) coherent buffer lightIndexListSSBOBlock
{
	uint data[];
} lightIndexListSSBO;

layout(binding = 3, rg32ui) uniform writeonly uimage2D uni_lightGrid;
layout(binding = 4, rgba16f) uniform writeonly image2D uni_debugTexture;

layout(binding = 0) uniform sampler2D depthTexture;

shared uint l_uMinDepth;
shared uint l_uMaxDepth;
shared Frustum l_TileFrustum;
shared uint l_LightCount;
shared uint l_LightIndexStartOffset;
shared uint l_LightList[1024];

const vec4 heatArray[8] = {
	vec4(0.0f, 0.0f, 0.5f, 1.0f),
	vec4(0.0f, 0.0f, 1.0f, 1.0f),
	vec4(0.0f, 1.0f, 0.5f, 1.0f),
	vec4(0.0f, 1.0f, 1.0f, 1.0f),
	vec4(0.0f, 0.5f, 0.0f, 1.0f),
	vec4(0.0f, 1.0f, 0.0f, 1.0f),
	vec4(1.0f, 1.0f, 0.0f, 1.0f),
	vec4(1.0f, 0.0f, 0.0f, 1.0f)
};

void AppendLight(uint lightIndex)
{
	uint index = atomicAdd(l_LightCount, 1); // Index into the visible lights array.
	if (index < 1024)
	{
		l_LightList[index] = lightIndex;
	}
	
}

void main()
{
	// Calculate min & max depth in threadgroup / tile.
	vec2 readTextureCoord = vec2(gl_GlobalInvocationID.xy) / skyUBO.viewportSize.xy;

	float fDepth = texture(depthTexture, readTextureCoord).r;
	fDepth = fDepth * 2.0 - 1.0;
	uint uDepth = floatBitsToUint(fDepth);

	ivec2 writeTexCoord = ivec2(gl_GlobalInvocationID.xy);

	// Initialize group local variables
	// Avoid contention by other threads in the group.
	if (gl_LocalInvocationIndex == 0)
	{
		l_uMinDepth = 0xffffffff;
		l_uMaxDepth = 0;
		l_LightCount = 0;
		l_LightIndexStartOffset = 0;
		l_TileFrustum = gridFrustumsSSBO.data[gl_WorkGroupID.x + (gl_WorkGroupID.y * dispatchParamsUBO.data[1].numThreadGroups.x)];
	}

	memoryBarrierShared();
	barrier();

	// Get min/max depth
	atomicMin(l_uMinDepth, uDepth);
	atomicMax(l_uMaxDepth, uDepth);

	memoryBarrierShared();
	barrier();

	float fMinDepth = uintBitsToFloat(l_uMinDepth);
	float fMaxDepth = uintBitsToFloat(l_uMaxDepth);

	// Convert depth values to view space.
	float minDepthVS = ClipToView(vec4(0, 0, fMinDepth, 1), skyUBO.p_inv).z;
	float maxDepthVS = ClipToView(vec4(0, 0, fMaxDepth, 1), skyUBO.p_inv).z;
	float nearClipVS = ClipToView(vec4(0, 0, -1, 1), skyUBO.p_inv).z;

	// Clipping plane for minimum depth value
	Plane minPlane = { vec3(0, 0, -1), -minDepthVS };

	// Cull point light
	for (uint i = gl_LocalInvocationIndex; i < NR_POINT_LIGHTS; i += BLOCK_SIZE * BLOCK_SIZE)
	{
		pointLight light = pointLightUBO.data[i];
		// w component of luminousFlux is the attenuation radius
		if (light.luminousFlux.w > 0.0f)
		{
			vec4 lightPos_VS = cameraUBO.t * light.position;
			lightPos_VS = cameraUBO.r * lightPos_VS;
			Sphere sphere = { lightPos_VS.xyz, light.luminousFlux.w };
			if (SphereInsideFrustum(sphere, l_TileFrustum, nearClipVS, maxDepthVS))
			{
				if (!SphereInsidePlane(sphere, minPlane))
				{
					AppendLight(i);
				}
			}
		}
	}

	memoryBarrierShared();
	barrier();

	// Only local thread 0 could write to the global light index counter and light grid
	if (gl_LocalInvocationIndex == 0)
	{
		l_LightIndexStartOffset = atomicAdd(lightListIndexCounterSSBO.data, l_LightCount);
		imageStore(uni_lightGrid, ivec2(gl_WorkGroupID.xy), uvec2(l_LightIndexStartOffset, l_LightCount).xyyy);
	}

	memoryBarrierShared();
	barrier();

	// Write to global light index list
	for (uint i = gl_LocalInvocationIndex; i < l_LightCount; i += BLOCK_SIZE * BLOCK_SIZE)
	{
		lightIndexListSSBO.data[l_LightIndexStartOffset + i] = l_LightList[i];
	}

	// Write to debug heat map texture
	imageStore(uni_debugTexture, writeTexCoord, vec4(0, 0, 0, 0));

	if (gl_LocalInvocationID.x == 0 || gl_LocalInvocationID.y == 0)
	{
		imageStore(uni_debugTexture, writeTexCoord, vec4(0, 0, 0, 0.9f));
	}
	else if (gl_LocalInvocationID.x == 1 || gl_LocalInvocationID.y == 1)
	{
		imageStore(uni_debugTexture, writeTexCoord, vec4(0, 0, 0, 0.5f));
	}
	else if (l_LightCount > 0)
	{
		vec4 heat;

		if (l_LightCount >= 8)
		{
			heat = heatArray[7];
		}
		else
		{
			heat = heatArray[l_LightCount - 1];
		}
		imageStore(uni_debugTexture, writeTexCoord, heat);
	}
	else
	{
		imageStore(uni_debugTexture, writeTexCoord, vec4(0, 0, 0, 1));
	}
	memoryBarrier();
}