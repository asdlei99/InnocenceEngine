// shadertype=glsl
#include "common.glsl"
#include "utility.glsl"

layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;

void main()
{
	// View space eye position is always at the origin.
	const vec3 eyePos = vec3(0, 0, 0);

	// Compute the 4 corner points on the far clipping plane to use as the
	// frustum vertices.
	vec4 screenSpace[4];
	// Bottom left point
	screenSpace[0] = vec4(gl_GlobalInvocationID.xy * BLOCK_SIZE, -1.0f, 1.0f);
	// Bottom right point
	screenSpace[1] = vec4(vec2(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y) * BLOCK_SIZE, -1.0f, 1.0f);
	// Top left point
	screenSpace[2] = vec4(vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y + 1) * BLOCK_SIZE, -1.0f, 1.0f);
	// Top right point
	screenSpace[3] = vec4(vec2(gl_GlobalInvocationID.x + 1, gl_GlobalInvocationID.y + 1) * BLOCK_SIZE, -1.0f, 1.0f);

	vec3 viewSpace[4];
	// Now convert the screen space points to view space
	for (int i = 0; i < 4; i++)
	{
		viewSpace[i] = ScreenToView(screenSpace[i], uni_viewportSize, uni_p_inv).xyz;
	}

	// Now build the frustum planes from the view space points
	Frustum frustum;

	// Left plane
	frustum.planes[0] = ComputePlane(eyePos, viewSpace[0], viewSpace[2]);
	// Right plane
	frustum.planes[1] = ComputePlane(eyePos, viewSpace[3], viewSpace[1]);
	// Top plane
	frustum.planes[2] = ComputePlane(eyePos, viewSpace[1], viewSpace[0]);
	// Bottom plane
	frustum.planes[3] = ComputePlane(eyePos, viewSpace[2], viewSpace[3]);

	// Store the computed frustum in global memory (if our thread ID is in bounds of the grid).
	if (gl_GlobalInvocationID.x < numThreads.x && gl_GlobalInvocationID.y < numThreads.y)
	{
		uint index = gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * numThreads.x);
		gridFrustums[index] = frustum;
	}
}