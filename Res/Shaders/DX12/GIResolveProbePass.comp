// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture2D in_BRDFLUT : register(t0);
Texture2D in_BRDFMSLUT : register(t1);

SamplerState SampleTypePoint : register(s0);

RWStructuredBuffer<Probe> in_probes : register(u0);
RWStructuredBuffer<BrickFactor> in_brickFactors : register(u1);
RWStructuredBuffer<float4> in_brickIrradiance : register(u2);
RWTexture3D<float4> out_irradianceVolume : register(u3);

#include "common/BRDF.hlsl"

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[4].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[4].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[4].numThreads.z)
	{
		uint idX = input.dispatchThreadID.x;
		uint idY = input.dispatchThreadID.y * dispatchParams[4].numThreads.x;
		uint idZ = input.dispatchThreadID.z * dispatchParams[4].numThreads.x * dispatchParams[4].numThreads.y;

		uint l_probeIndex = idX + idY + idZ;
		Probe l_probe = in_probes[l_probeIndex];

		float3 l_writeCoord = l_probe.pos / posWSNormalizer.xyz;
		l_writeCoord *= float3(4, 1, 4);

		float4 Lo[6];

		for (uint i = 0; i < 6; i++)
		{
			uint brickFactorRangeBegin = l_probe.brickFactorRange[i * 2];
			uint brickFactorRangeEnd = l_probe.brickFactorRange[i * 2 + 1];

			if (brickFactorRangeBegin != brickFactorRangeEnd)
			{
				Lo[i] = float4(0.0, 0.0, 0.0, 0.0);

				for (uint j = brickFactorRangeBegin; j < brickFactorRangeEnd; j++)
				{
					BrickFactor l_brickFactor = in_brickFactors[j];
					Lo[i] += in_brickIrradiance[l_brickFactor.brickIndex] * l_brickFactor.basisWeight;
				}

				Lo[i] /= (brickFactorRangeEnd - brickFactorRangeBegin);
			}
			else
			{
				Lo[i] = in_brickIrradiance[in_brickFactors[brickFactorRangeBegin].brickIndex];
			}
			out_irradianceVolume[l_writeCoord + float3(0, 0, float(i) * 4)] = Lo[i];
		}
	}
}