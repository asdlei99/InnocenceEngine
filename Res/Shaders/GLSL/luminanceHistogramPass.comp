// shadertype=glsl
#include "common/common.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)

layout(set = 1, binding = 0) uniform texture2D in_luminance;
layout(std430, set = 1, binding = 1) coherent buffer histogramSSBOBlock
{
	uint data[];
} histogramSSBO;
layout(set = 2, binding = 0) uniform sampler samplerLinear;

shared uint histogramShared[256];

uint colorToBin(vec3 hdrColor, float minLogLum, float inverseLogLumRange)
{
	float lum = dot(hdrColor, RGB_TO_LUM);

	if (lum < eps)
	{
		return 0;
	}

	float logLum = clamp((log2(lum) - minLogLum) * inverseLogLumRange, 0.0, 1.0);

	return uint(logLum * 254.0 + 1.0);
}

void main()
{
	histogramShared[gl_LocalInvocationIndex] = 0;
	groupMemoryBarrier();

	uvec2 dim = textureSize(sampler2D(in_luminance, samplerLinear), 0).xy;

	if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y)
	{
		vec3 hdrColor = texelFetch(sampler2D(in_luminance, samplerLinear), ivec2(gl_GlobalInvocationID.xy), 0).xyz;
		uint binIndex = colorToBin(hdrColor, -10.0, 1.0 / 26.0);

		atomicAdd(histogramShared[binIndex], 1);
	}

	groupMemoryBarrier();

	atomicAdd(histogramSSBO.data[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
}