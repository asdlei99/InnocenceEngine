#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct DispatchParam
{
	uvec4 numThreadGroups;
	uvec4 numThreads;
};

struct PerFrame_CB
{
	mat4 p_original; // 0 - 3
	mat4 p_jittered; // 4 - 7
	mat4 v; // 8 - 11
	mat4 v_prev; // 12 - 15
	mat4 p_inv; // 16 - 19
	mat4 v_inv; // 20 - 23
	float zNear; // Tight packing 24
	float zFar; // Tight packing 24
	float minLogLuminance; // Tight packing 24
	float maxLogLuminance; // Tight packing 24
	vec4 sun_direction; // 25
	vec4 sun_illuminance; // 26
	vec4 viewportSize; // 27
	vec4 posWSNormalizer; // 28
	vec4 camera_posWS; // 29
	vec4 padding[2]; // 30 - 31
};

layout(set = 0, binding = 6, std140) uniform dispatchParamsCBuffer
{
	DispatchParam dispatchParams[8];
} _26;

layout(std140, row_major, set = 0, binding = 0) uniform perFrameCBufferBlock
{
	PerFrame_CB data;
} _71;

layout(std140, row_major, set = 0, binding = 8) uniform GICBufferBlock
{
	mat4 p;
	mat4 r[6];
	mat4 t;
	mat4 p_inv;
	mat4 v_inv[6];
	vec4 probeCount;
	vec4 probeRange;
	vec4 workload;
	vec4 irradianceVolumeOffset;
} _97;

layout(set = 1, binding = 0) uniform texture3D in_probeVolume;
layout(set = 2, binding = 0, rgba32f) uniform writeonly image3D out_irradianceVolume;
layout(set = 3, binding = 0) uniform sampler SampleTypePoint;

void main()
{
	if (((gl_GlobalInvocationID.x < _26.dispatchParams[5].numThreads.x) && (gl_GlobalInvocationID.y < _26.dispatchParams[5].numThreads.y)) && (gl_GlobalInvocationID.z < _26.dispatchParams[5].numThreads.z))
	{
		vec3 _374 = (((((vec3(gl_GlobalInvocationID) / vec3(_26.dispatchParams[5].numThreads.xyz)) * _71.data.posWSNormalizer.xyz) + ((_71.data.posWSNormalizer.xyz / vec3(_26.dispatchParams[5].numThreads.xyz)) * vec3(0.5))) + _97.irradianceVolumeOffset.xyz) - vec3(_97.probeCount.w, _97.probeRange.w, _97.irradianceVolumeOffset.w)) / _97.probeRange.xyz;
		vec4 _298[6];
		for (uint _458 = 0u; _458 < 6u; )
		{
			vec3 _452 = _374;
			_452.z = (_374.z + float(_458)) * 0.16666667163372039794921875;
			vec4 _410 = textureLod(sampler3D(in_probeVolume, SampleTypePoint), _452, 0.0);
			_298[_458] = vec4(_410.x, _410.y, _410.z, _298[_458].w);
			_298[_458].w = 1.0;
			imageStore(out_irradianceVolume, ivec3(uvec3(vec3(gl_GlobalInvocationID) + vec3(0.0, 0.0, float(_458) * float(_26.dispatchParams[5].numThreads.z)))), _298[_458]);
			_458++;
			continue;
		}
	}
}
