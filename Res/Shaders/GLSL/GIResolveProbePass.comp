#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

struct DispatchParam
{
	uvec4 numThreadGroups;
	uvec4 numThreads;
};

struct Probe
{
	vec4 pos;
	uint brickFactorRange[12];
	float skyVisibility[6];
	uint padding[10];
};

struct BrickFactor
{
	float basisWeight;
	uint brickIndex;
};

layout(binding = 6, set = 0, std140) uniform dispatchParamsCBuffer
{
	DispatchParam dispatchParams[8];
} _30;

layout(std140, row_major, set = 0, binding = 8) uniform GICBufferBlock
{
	mat4 p;
	mat4 r[6];
	mat4 t;
	mat4 p_inv;
	mat4 v_inv[6];
	vec4 probeCount;
	vec4 probeRange;
	vec4 workload;
	vec4 irradianceVolumeOffset;
}_58;

layout(binding = 0, set = 1, std430) buffer in_probes
{
	Probe _data[];
} in_probes_1;

layout(binding = 1, set = 1, std430) buffer in_brickFactors
{
	BrickFactor _data[];
} in_brickFactors_1;

layout(binding = 2, set = 1, std430) buffer in_brickIrradiance
{
	vec4 _data[];
} in_brickIrradiance_1;

layout(binding = 3, set = 1, rgba32f) uniform writeonly image3D out_irradianceVolume;

void main()
{
	uint _396 = (gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * _30.dispatchParams[4].numThreads.x)) + ((gl_GlobalInvocationID.z * _30.dispatchParams[4].numThreads.x) * _30.dispatchParams[4].numThreads.y);
	if (float(_396) < _58.workload.z)
	{
		uint _573[12];
		_573[0] = in_probes_1._data[_396].brickFactorRange[0];
		_573[1] = in_probes_1._data[_396].brickFactorRange[1];
		_573[2] = in_probes_1._data[_396].brickFactorRange[2];
		_573[3] = in_probes_1._data[_396].brickFactorRange[3];
		_573[4] = in_probes_1._data[_396].brickFactorRange[4];
		_573[5] = in_probes_1._data[_396].brickFactorRange[5];
		_573[6] = in_probes_1._data[_396].brickFactorRange[6];
		_573[7] = in_probes_1._data[_396].brickFactorRange[7];
		_573[8] = in_probes_1._data[_396].brickFactorRange[8];
		_573[9] = in_probes_1._data[_396].brickFactorRange[9];
		_573[10] = in_probes_1._data[_396].brickFactorRange[10];
		_573[11] = in_probes_1._data[_396].brickFactorRange[11];
		float _574[6];
		_574[0] = in_probes_1._data[_396].skyVisibility[0];
		_574[1] = in_probes_1._data[_396].skyVisibility[1];
		_574[2] = in_probes_1._data[_396].skyVisibility[2];
		_574[3] = in_probes_1._data[_396].skyVisibility[3];
		_574[4] = in_probes_1._data[_396].skyVisibility[4];
		_574[5] = in_probes_1._data[_396].skyVisibility[5];
		uint _610;
		_610 = 0u;
		vec3 _480;
		vec4 _374[6];
		for (; _610 < 6u; _374[_610].w = _574[_610], imageStore(out_irradianceVolume, ivec3(uvec3(_480 + vec3(0.0, 0.0, float(_610) * _58.probeCount.z))), _374[_610]), _610++)
		{
			_480 = in_probes_1._data[_396].pos.xyz;
			_374[_610] = vec4(0.0);
			uint _484 = _610 * 2u;
			uint _486 = _573[_484];
			uint _489 = (_610 * 2u) + 1u;
			uint _491 = _573[_489];
			if (_486 != 4294967295u)
			{
				if (_486 != _491)
				{
					for (uint _611 = _486; _611 <= _491; )
					{
						_374[_610] += (in_brickIrradiance_1._data[in_brickFactors_1._data[_611].brickIndex] * in_brickFactors_1._data[_611].basisWeight);
						_611++;
						continue;
					}
					_374[_610] /= vec4(float((_491 - _486) + 1u));
				}
				else
				{
					_374[_610] = in_brickIrradiance_1._data[in_brickFactors_1._data[_486].brickIndex];
				}
				continue;
			}
			else
			{
				continue;
			}
			continue;
		}
	}
}
