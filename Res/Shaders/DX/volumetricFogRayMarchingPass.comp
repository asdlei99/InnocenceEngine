// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture3D<float4> in_froxelVolume : register(t0);
RWTexture2D<float4> out_result : register(u0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[6].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[6].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[6].numThreads.z)
	{
		float3 l_writeCoord = float3(input.dispatchThreadID);
		float3 l_readCoord = l_writeCoord;
		l_readCoord.xy /= float2(1280, 720);
		l_readCoord.xy *= float2(160, 90);

		float4 l_result = float4(0.0, 0.0, 0.0, 1.0);

		for (int i = 0; i < 64; i++)
		{
			l_readCoord.z = float(i);
			float4 froxelPos = in_froxelVolume[l_readCoord];
			l_result.xyz += froxelPos.xyz;
		}

		out_result[l_writeCoord.xy] = l_result;
	}
}