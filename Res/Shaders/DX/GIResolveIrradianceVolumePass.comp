// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture3D<float4> in_probeVolume : register(t0);
RWTexture3D<float4> out_irradianceVolume : register(u0);

SamplerState SampleTypePoint : register(s0);

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[5].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[5].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[5].numThreads.z)
	{
		float3 l_readCoord = (input.dispatchThreadID);

		// To the real world space
		l_readCoord += GISky_irradianceVolumeOffset.xyz;

		// To the world space where probe minimum position as the origin
		float3 l_probeRange = GISky_probeInterval.xyz * (GISky_probeCount.xyz - 1.0);
		float3 l_minProbePos = float3(GISky_probeCount.w, GISky_probeInterval.w, GISky_irradianceVolumeOffset.w);
		float3 l_maxProbePos = l_minProbePos + l_probeRange;

		l_readCoord = clamp(l_readCoord, l_minProbePos, l_maxProbePos);
		l_readCoord -= l_minProbePos;

		// Normalize
		l_readCoord /= l_probeRange;

		float4 Lo[6];

		for (uint i = 0; i < 6; i++)
		{
			// Get irradiance from probes
			float zOffset = float(i) * dispatchParams[5].numThreads.z;
			float3 l_writeCoord = (input.dispatchThreadID);
			l_writeCoord = l_writeCoord + float3(0, 0, zOffset);

			float3 l_offsetReadCoord = l_readCoord;
			l_offsetReadCoord.z /= 6.0;
			l_offsetReadCoord.z += (float(i) / 6.0);

			float4 irradiance = in_probeVolume.SampleLevel(SampleTypePoint, l_offsetReadCoord, 0);

			Lo[i] = irradiance;

			out_irradianceVolume[l_writeCoord] = Lo[i];
		}
	}
}