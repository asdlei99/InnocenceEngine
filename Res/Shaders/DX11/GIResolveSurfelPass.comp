// shadertype=hlsl
#include "common/common.hlsl"

struct ComputeInputType
{
	uint3 groupID : SV_GroupID;           // 3D index of the thread group in the dispatch.
	uint3 groupThreadID : SV_GroupThreadID;     // 3D index of local thread ID in a thread group.
	uint3 dispatchThreadID : SV_DispatchThreadID;  // 3D index of global thread ID in the dispatch.
	uint  groupIndex : SV_GroupIndex;        // Flattened local index of the thread within a thread group.
};

Texture2D in_BRDFLUT : register(t0);
Texture2D in_BRDFMSLUT : register(t1);

SamplerState SampleTypePoint : register(s0);

RWStructuredBuffer<Surfel> in_surfels : register(u0);
RWStructuredBuffer<float4> out_irradiance : register(u1);

#include "common/BRDF.hlsl"

[numthreads(8, 8, 8)]
void main(ComputeInputType input)
{
	if (input.dispatchThreadID.x < dispatchParams[2].numThreads.x
		&& input.dispatchThreadID.y < dispatchParams[2].numThreads.y
		&& input.dispatchThreadID.z < dispatchParams[2].numThreads.z)
	{
		uint l_surfelIndex = input.dispatchThreadID.x + (input.dispatchThreadID.y * dispatchParams[2].numThreads.x) + (input.dispatchThreadID.z * dispatchParams[2].numThreads.x * dispatchParams[2].numThreads.y);
		Surfel l_surfel = in_surfels[l_surfelIndex];

		float3 posWS = l_surfel.pos.xyz;
		float metallic = l_surfel.MRAT.x;
		float3 normalWS = l_surfel.normal.xyz;
		float roughness = l_surfel.MRAT.y;
		float3 albedo = l_surfel.albedo.xyz;
		float ao = l_surfel.MRAT.z;

		float3 F0 = float3(0.04, 0.04, 0.04);
		F0 = lerp(F0, albedo, metallic);

		float3 N = normalize(normalWS);
		float3 V = normalize(cameraCBuffer.globalPos.xyz - posWS);
		float NdotV = max(dot(N, V), 0.0);

		float3 L = normalize(-dirLight_dir.xyz);
		float3 H = normalize(V + L);

		float LdotH = max(dot(L, H), 0.0);
		float NdotH = max(dot(N, H), 0.0);
		float NdotL = max(dot(N, L), 0.0);

		// Specular BRDF
		float F90 = 1.0;
		float3 F = fresnelSchlick(F0, F90, LdotH);
		float G = V_SmithGGXCorrelated(NdotV, NdotL, roughness);
		float D = D_GGX(NdotH, roughness);
		float3 Frss = F * G * D;

		float3 kS = F;
		float3 kD = float3(1.0, 1.0, 1.0) - kS;

		kD *= 1.0 - metallic;

		// Diffuse BRDF
		float3 Fd = DisneyDiffuse2015(NdotV, NdotL, LdotH, roughness * roughness) * albedo / PI;
		float3 BRDF = kD * Fd + Frss;

		float3 Lo = BRDF * dirLight_luminance.xyz * NdotL;

		out_irradiance[l_surfelIndex] = float4(Lo, 1.0);
	}
}